/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.imoka.demo_single_app.basic;

import ModernDocking.Dockable;
import ModernDocking.DockableMenuItem;
import ModernDocking.Docking;
import ModernDocking.LayoutsMenu;
import ModernDocking.api.DockingAPI;
import ModernDocking.exception.DockingLayoutException;
import ModernDocking.layouts.ApplicationLayout;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedDarkIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubDarkIJTheme;
import java.awt.Color;
import java.awt.Insets;
import org.imoka.util.Ico;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import org.imoka.demo_single_app.exception.FailOnThreadViolationRepaintManager;
import org.imoka.service.services.CustomOutputStream;
import org.imoka.util.Settings;
import org.imoka.util.Util;
import picocli.CommandLine;

/**
 *
 * @author r.hendrick
 */
public class MainWindow extends javax.swing.JFrame implements InternalFrameListener, Callable<Integer> {

    private final File layoutFile;
    @CommandLine.Option(names = "--laf", required = true, description = "look and feel to use. one of: system, light, dark, github-dark or solarized-dark")
    String lookAndFeel;

    @CommandLine.Option(names = "--enable-edt-violation-detector", defaultValue = "false", description = "enable the Event Dispatch Thread (EDT) violation checker")
    boolean edtViolationDetector;

    @CommandLine.Option(names = "--ui-scale", defaultValue = "1", description = "scale to use for the FlatLaf.uiScale value")
    int uiScale;

    @CommandLine.Option(names = "--always-use-tabs", defaultValue = "false", description = "always use tabs, even when there is only 1 dockable in the tab group")
    boolean alwaysUseTabs;

    private DockingAPI docking;

    /**
     * Configuration Frame contains all configuration for alication.
     */
//    private ConfigFrame configFrame = null;
    /**
     * Configuration Frame contains all configuration for alication.
     */
//    private PLCTesterFrame plcTesterFrame = null;
    /**
     * Transfer frame allow to view and transfer available data from zenon to
     * optimaint
     */
//    private TransferFrame transferFrame = null;
    private ArrayList<InternalFrameListener> internalFrameListeners = new ArrayList<>();

    public void addListener(InternalFrameListener listener) {
        internalFrameListeners.add(listener);
    }

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.layoutFile = new File("obi_config_layout.xml");

        PrintStream printStream = new PrintStream(new CustomOutputStream(outputStream));
        System.setOut(printStream);
        System.setErr(printStream);
        Util.out("MainWindow : Constructor >> Started ...");

        // Create docking
        docking = new Docking(this);
        ModernDocking.settings.Settings.setAlwaysDisplayTabMode(alwaysUseTabs);

//        windowMenu.add(new LayoutsMenu(docking));
//        mainToolBar.add(windowMenu);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainToolBar = new javax.swing.JToolBar();
        tbBtnConfigurations = new javax.swing.JButton();
        tbBtnLinks = new javax.swing.JButton();
        tbBtnTransfer = new javax.swing.JButton();
        tbBtnExit = new javax.swing.JButton();
        tbBtnPLCTester = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();
        outputStreamPanel = new javax.swing.JPanel();
        outputStreamScroll = new javax.swing.JScrollPane();
        outputStream = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveLayout = new javax.swing.JMenuItem();
        loadLayoutMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        menuItemConfigurations = new javax.swing.JMenuItem();
        menuItemLinks = new javax.swing.JMenuItem();
        menuItemTransfer = new javax.swing.JMenuItem();
        mItemConfig = new javax.swing.JMenu();
        mIConfigApp = new javax.swing.JMenuItem();
        mIConfigAutomate = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        themeMenu = new javax.swing.JMenu();
        menuItemThemeMetal = new javax.swing.JMenuItem();
        menuItemThemeNimbus = new javax.swing.JMenuItem();
        menuItemThemeCDEMotif = new javax.swing.JMenuItem();
        menuItemThemeWindows = new javax.swing.JMenuItem();
        menuItemThemeWindowsClassic = new javax.swing.JMenuItem();
        themeSeparator = new javax.swing.JPopupMenu.Separator();
        miThemeLight = new javax.swing.JMenuItem();
        miThemeDark = new javax.swing.JMenuItem();
        miThemeGitHubDark = new javax.swing.JMenuItem();
        miThemeSolarizedDark = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bundles/Fr_fr"); // NOI18N
        setTitle(bundle.getString("AppVersion")); // NOI18N
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setIconImage(Ico.i16("/img/obi/obi-signet-dark.png", this).getImage());
        setName("MainWindowFrame"); // NOI18N
        setSize(new java.awt.Dimension(1024, 680));

        mainToolBar.setRollover(true);

        tbBtnConfigurations.setIcon(Ico.i48("/img/oz/config.png", this));
        tbBtnConfigurations.setText("Configurations");
        tbBtnConfigurations.setFocusable(false);
        tbBtnConfigurations.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbBtnConfigurations.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbBtnConfigurations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBtnConfigurationsActionPerformed(evt);
            }
        });
        mainToolBar.add(tbBtnConfigurations);

        tbBtnLinks.setIcon(Ico.i48("/img/oz/link.png", this));
        tbBtnLinks.setText("Correspondance");
        tbBtnLinks.setFocusable(false);
        tbBtnLinks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbBtnLinks.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbBtnLinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBtnLinksActionPerformed(evt);
            }
        });
        mainToolBar.add(tbBtnLinks);

        tbBtnTransfer.setIcon(Ico.i48("/img/oz/transfer.png", this));
        tbBtnTransfer.setText("Transf√©rer");
        tbBtnTransfer.setFocusable(false);
        tbBtnTransfer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbBtnTransfer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbBtnTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBtnTransferActionPerformed(evt);
            }
        });
        mainToolBar.add(tbBtnTransfer);

        tbBtnExit.setIcon(Ico.i48("/img/oz/exit.png", this));
        tbBtnExit.setText("Quitter");
        tbBtnExit.setFocusable(false);
        tbBtnExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbBtnExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbBtnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBtnExitActionPerformed(evt);
            }
        });
        mainToolBar.add(tbBtnExit);

        tbBtnPLCTester.setIcon(Ico.i48("/img/oz/config.png", this));
        tbBtnPLCTester.setText("API Test");
        tbBtnPLCTester.setFocusable(false);
        tbBtnPLCTester.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbBtnPLCTester.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbBtnPLCTester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBtnPLCTesterActionPerformed(evt);
            }
        });
        mainToolBar.add(tbBtnPLCTester);

        desktopPane.setBackground(new java.awt.Color(153, 153, 153));
        desktopPane.setPreferredSize(new java.awt.Dimension(901, 600));

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 932, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 493, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout outputStreamPanelLayout = new javax.swing.GroupLayout(outputStreamPanel);
        outputStreamPanel.setLayout(outputStreamPanelLayout);
        outputStreamPanelLayout.setHorizontalGroup(
            outputStreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 912, Short.MAX_VALUE)
        );
        outputStreamPanelLayout.setVerticalGroup(
            outputStreamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );

        outputStream.setColumns(20);
        outputStream.setRows(5);
        outputStreamScroll.setViewportView(outputStream);

        fileMenu.setMnemonic('f');
        fileMenu.setText(bundle.getString("MenuFile")); // NOI18N
        fileMenu.setToolTipText("Gestion de l'application");

        saveLayout.setText("Sauver l'affichage");
        saveLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLayoutActionPerformed(evt);
            }
        });
        fileMenu.add(saveLayout);

        loadLayoutMenuItem.setText("Charger l'affichage");
        loadLayoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadLayoutMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadLayoutMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setIcon(Ico.i16("/img/oz/exit.png", this)
        );
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText(bundle.getString("MenuFileExit")); // NOI18N
        exitMenuItem.setToolTipText("Permet de quitter l'application");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText(bundle.getString("MenuEdit")); // NOI18N

        menuItemConfigurations.setIcon(Ico.i16("/img/oz/config.png", this));
        menuItemConfigurations.setMnemonic('t');
        menuItemConfigurations.setText("Configurations");
        menuItemConfigurations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemConfigurationsActionPerformed(evt);
            }
        });
        editMenu.add(menuItemConfigurations);

        menuItemLinks.setIcon(Ico.i16("/img/oz/link.png", this)
        );
        menuItemLinks.setMnemonic('y');
        menuItemLinks.setText(bundle.getString("MenuEditLink")); // NOI18N
        menuItemLinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLinksActionPerformed(evt);
            }
        });
        editMenu.add(menuItemLinks);

        menuItemTransfer.setIcon(Ico.i16("/img/oz/transfer.png", this));
        menuItemTransfer.setMnemonic('p');
        menuItemTransfer.setText(bundle.getString("MenuEditTransfert")); // NOI18N
        menuItemTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTransferActionPerformed(evt);
            }
        });
        editMenu.add(menuItemTransfer);

        menuBar.add(editMenu);

        mItemConfig.setMnemonic('e');
        mItemConfig.setText(bundle.getString("MenuEdit")); // NOI18N

        mIConfigApp.setIcon(Ico.i16("/img/oz/config.png", this));
        mIConfigApp.setMnemonic('t');
        mIConfigApp.setText("Application");
        mIConfigApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mIConfigAppActionPerformed(evt);
            }
        });
        mItemConfig.add(mIConfigApp);

        mIConfigAutomate.setIcon(Ico.i16("/img/oz/config.png", this));
        mIConfigAutomate.setMnemonic('t');
        mIConfigAutomate.setText("Automate");
        mIConfigAutomate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mIConfigAutomateActionPerformed(evt);
            }
        });
        mItemConfig.add(mIConfigAutomate);

        menuBar.add(mItemConfig);

        viewMenu.setText("Affichage");
        menuBar.add(viewMenu);

        themeMenu.setText("Th√®mes");

        menuItemThemeMetal.setMnemonic('t');
        menuItemThemeMetal.setText("Metal");
        menuItemThemeMetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemThemeMetalActionPerformed(evt);
            }
        });
        themeMenu.add(menuItemThemeMetal);

        menuItemThemeNimbus.setMnemonic('t');
        menuItemThemeNimbus.setText("Nimbus");
        menuItemThemeNimbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemThemeNimbusActionPerformed(evt);
            }
        });
        themeMenu.add(menuItemThemeNimbus);

        menuItemThemeCDEMotif.setMnemonic('t');
        menuItemThemeCDEMotif.setText("CDE/Motif");
        menuItemThemeCDEMotif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemThemeCDEMotifActionPerformed(evt);
            }
        });
        themeMenu.add(menuItemThemeCDEMotif);

        menuItemThemeWindows.setMnemonic('t');
        menuItemThemeWindows.setText("Windows");
        menuItemThemeWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemThemeWindowsActionPerformed(evt);
            }
        });
        themeMenu.add(menuItemThemeWindows);

        menuItemThemeWindowsClassic.setMnemonic('t');
        menuItemThemeWindowsClassic.setText("Windows Classic");
        menuItemThemeWindowsClassic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemThemeWindowsClassicActionPerformed(evt);
            }
        });
        themeMenu.add(menuItemThemeWindowsClassic);
        themeMenu.add(themeSeparator);

        miThemeLight.setMnemonic('t');
        miThemeLight.setText("Flatlaf - Light");
        miThemeLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miThemeLightActionPerformed(evt);
            }
        });
        themeMenu.add(miThemeLight);

        miThemeDark.setMnemonic('t');
        miThemeDark.setText("Flatlaf - Dark");
        miThemeDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miThemeDarkActionPerformed(evt);
            }
        });
        themeMenu.add(miThemeDark);

        miThemeGitHubDark.setMnemonic('t');
        miThemeGitHubDark.setText("GitHub - Dark");
        miThemeGitHubDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miThemeGitHubDarkActionPerformed(evt);
            }
        });
        themeMenu.add(miThemeGitHubDark);

        miThemeSolarizedDark.setMnemonic('t');
        miThemeSolarizedDark.setText("Soloarized - Dark");
        miThemeSolarizedDark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miThemeSolarizedDarkActionPerformed(evt);
            }
        });
        themeMenu.add(miThemeSolarizedDark);

        menuBar.add(themeMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText(bundle.getString("MenuHelp")); // NOI18N

        contentMenuItem.setIcon(Ico.i16("/img/std/DlgInfos.png", this));
        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText(bundle.getString("MenuHelpDocs")); // NOI18N
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText(bundle.getString("MenuHelpAbout")); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
            .addComponent(desktopPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
            .addComponent(outputStreamScroll)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(outputStreamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputStreamScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(284, 284, 284)
                    .addComponent(outputStreamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(293, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void menuItemConfigurationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemConfigurationsActionPerformed
//        if (PLCTesterFrame.openFrameCount == 0) {
//            configFrame = new ConfigFrame();
//            desktopPane.add(configFrame);
//        } else {
//            revalidate();
//            repaint();
//        }
//        configFrame.setVisible(true);
//        try {
//            configFrame.setMaximum(true);
//            configFrame.setSelected(true);
//        } catch (PropertyVetoException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_menuItemConfigurationsActionPerformed

    private void tbBtnConfigurationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBtnConfigurationsActionPerformed
        // TODO add your handling code here:
        menuItemConfigurationsActionPerformed(evt);
    }//GEN-LAST:event_tbBtnConfigurationsActionPerformed

    private void tbBtnLinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBtnLinksActionPerformed
        // TODO add your handling code here:
        menuItemLinksActionPerformed(evt);
    }//GEN-LAST:event_tbBtnLinksActionPerformed

    private void menuItemLinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLinksActionPerformed

    }//GEN-LAST:event_menuItemLinksActionPerformed

    private void menuItemThemeMetalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemThemeMetalActionPerformed
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_menuItemThemeMetalActionPerformed

    private void menuItemThemeNimbusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemThemeNimbusActionPerformed
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_menuItemThemeNimbusActionPerformed

    private void menuItemThemeCDEMotifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemThemeCDEMotifActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_menuItemThemeCDEMotifActionPerformed

    private void menuItemThemeWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemThemeWindowsActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_menuItemThemeWindowsActionPerformed

    private void menuItemThemeWindowsClassicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemThemeWindowsClassicActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            pack();
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            Util.out(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_menuItemThemeWindowsClassicActionPerformed

    private void tbBtnTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBtnTransferActionPerformed
        // TODO add your handling code here:
        menuItemTransferActionPerformed(evt);
    }//GEN-LAST:event_tbBtnTransferActionPerformed

    private void menuItemTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTransferActionPerformed
//        if (TransferFrame.openFrameCount == 0) {
//            transferFrame = new TransferFrame(this);
//            desktopPane.add(transferFrame);
//            internalFrameListeners.add(transferFrame);
//        } else {
//            revalidate();
//            repaint();
//        }
//        transferFrame.setVisible(true);
//        try {
//            transferFrame.setMaximum(true);
//            transferFrame.setSelected(true);
//        } catch (PropertyVetoException ex) {
//            Util.out("MainWindow : menuItemTransferActionPerformed >> " +  ex.getMessage());
//        }
    }//GEN-LAST:event_menuItemTransferActionPerformed

    private void tbBtnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBtnExitActionPerformed
        exitMenuItemActionPerformed(evt);
    }//GEN-LAST:event_tbBtnExitActionPerformed

    private void tbBtnPLCTesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBtnPLCTesterActionPerformed
        // TODO add your handling code here:
//        if (PLCTesterFrame.openFrameCount == 0) {
//            configFrame = new ConfigFrame();
//            desktopPane.add(configFrame);
//        } else {
//            revalidate();
//            repaint();
//        }
//        configFrame.setVisible(true);
//        try {
//            configFrame.setMaximum(true);
//            configFrame.setSelected(true);
//        } catch (PropertyVetoException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_tbBtnPLCTesterActionPerformed

    private JMenuItem actionListenDock(DockingAPI docking, Dockable dockable) {
        return new DockableMenuItem(docking, dockable.getPersistentID(), dockable.getTabText());
    }
    private void mIConfigAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mIConfigAppActionPerformed
        // TODO add your handling code here:
        SimplePanel appConfig = new SimplePanel(docking,
                "Configuration - Application",
                "configApp");
        appConfig.setBackground(new Color(0xa1f2ff));
        appConfig.setTitleForeground(Color.black);

        viewMenu.add(actionListenDock(docking, appConfig));


//        if (ConfigFrame.openFrameCount == 0) {
//            configFrame = new ConfigFrame();
//            desktopPane.add(configFrame);
//        } else {
//            revalidate();
//            repaint();
//        }
//        configFrame.setVisible(true);
//        try {
//            configFrame.setMaximum(true);
//            configFrame.setSelected(true);
//        } catch (PropertyVetoException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_mIConfigAppActionPerformed

    private void mIConfigAutomateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mIConfigAutomateActionPerformed
        // TODO add your handling code here:
//        if (PLCTesterFrame.openFrameCount == 0) {
//            plcTesterFrame = new PLCTesterFrame();
//            desktopPane.add(plcTesterFrame);
//        } else {
//            revalidate();
//            repaint();
//        }
//        plcTesterFrame.setVisible(true);
//        try {
//            plcTesterFrame.setMaximum(true);
//            plcTesterFrame.setSelected(true);
//        } catch (PropertyVetoException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_mIConfigAutomateActionPerformed

    private void saveLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLayoutActionPerformed
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showSaveDialog(MainWindow.this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();

            ApplicationLayout layout = docking.getDockingState().getApplicationLayout();

            try {
                docking.getLayoutPersistence().saveLayoutToFile(selectedFile, layout);
            } catch (DockingLayoutException ex) {
                ex.printStackTrace();

                JOptionPane.showMessageDialog(MainWindow.this,
                        "Failed to save layout");
            }
        }
    }//GEN-LAST:event_saveLayoutActionPerformed

    private void loadLayoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadLayoutMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showOpenDialog(MainWindow.this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();

            ApplicationLayout layout = null;
            try {
                layout = docking.getLayoutPersistence().loadApplicationLayoutFromFile(selectedFile);
            } catch (DockingLayoutException ex) {
                ex.printStackTrace();
            }

            if (layout != null) {
                docking.getDockingState().restoreApplicationLayout(layout);
            }
        }
    }//GEN-LAST:event_loadLayoutMenuItemActionPerformed

    private void miThemeLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miThemeLightActionPerformed
        try {
            FlatLaf.registerCustomDefaultsSource("docking");
            System.setProperty("flatlaf.uiScale", String.valueOf(uiScale));

            UIManager.setLookAndFeel(new FlatLightLaf());
            SwingUtilities.updateComponentTreeUI(this);
            //pack();
            this.setIconImage(Ico.i16("/img/obi/obi-signet-light.png", this).getImage());
            FlatLaf.updateUI();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                    | UnsupportedLookAndFeelException ex) {
                throw new RuntimeException(ex);
            }
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

        if (edtViolationDetector) {
            // this is an app to test the docking framework, we want to make sure we detect EDT violations as soon as possible
            FailOnThreadViolationRepaintManager.install();
        }
    }//GEN-LAST:event_miThemeLightActionPerformed

    private void miThemeDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miThemeDarkActionPerformed
        try {
            FlatLaf.registerCustomDefaultsSource("docking");
            System.setProperty("flatlaf.uiScale", String.valueOf(uiScale));

            UIManager.setLookAndFeel(new FlatDarkLaf());
            SwingUtilities.updateComponentTreeUI(this);
            //pack();
            this.setIconImage(Ico.i16("/img/obi/obi-signet-dark.png", this).getImage());
            FlatLaf.updateUI();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                    | UnsupportedLookAndFeelException ex) {
                throw new RuntimeException(ex);
            }
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

        if (edtViolationDetector) {
            // this is an app to test the docking framework, we want to make sure we detect EDT violations as soon as possible
            FailOnThreadViolationRepaintManager.install();
        }
    }//GEN-LAST:event_miThemeDarkActionPerformed

    private void miThemeGitHubDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miThemeGitHubDarkActionPerformed
        try {
            FlatLaf.registerCustomDefaultsSource("docking");
            System.setProperty("flatlaf.uiScale", String.valueOf(uiScale));

            UIManager.setLookAndFeel(new FlatGitHubDarkIJTheme());
            SwingUtilities.updateComponentTreeUI(this);
            //pack();
            this.setIconImage(Ico.i16("/img/obi/obi-signet-dark.png", this).getImage());
            FlatLaf.updateUI();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                    | UnsupportedLookAndFeelException ex) {
                throw new RuntimeException(ex);
            }
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

        if (edtViolationDetector) {
            // this is an app to test the docking framework, we want to make sure we detect EDT violations as soon as possible
            FailOnThreadViolationRepaintManager.install();
        }
    }//GEN-LAST:event_miThemeGitHubDarkActionPerformed

    private void miThemeSolarizedDarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miThemeSolarizedDarkActionPerformed
        try {
            FlatLaf.registerCustomDefaultsSource("docking");
            System.setProperty("flatlaf.uiScale", String.valueOf(uiScale));

            UIManager.setLookAndFeel(new FlatSolarizedDarkIJTheme());
            SwingUtilities.updateComponentTreeUI(this);
            //pack();
            this.setIconImage(Ico.i16("/img/obi/obi-signet-dark.png", this).getImage());
            FlatLaf.updateUI();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                    | UnsupportedLookAndFeelException ex) {
                throw new RuntimeException(ex);
            }
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

        if (edtViolationDetector) {
            // this is an app to test the docking framework, we want to make sure we detect EDT violations as soon as possible
            FailOnThreadViolationRepaintManager.install();
        }
    }//GEN-LAST:event_miThemeSolarizedDarkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //Util.out("Look and fell " + info.getName() + " use class : " + info.getClassName());
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            Util.out("OBI - Start...");
            Settings.iniFilename = "OBI.ini";
            Util.out("MainWidnow >> Main  : "
                    + "Initialisation du fichier de configuration...");
            if (Settings.createIniFile()) {
                Settings.writeDefaultClientSetup();
            }

            MainWindow w = new MainWindow();
            w.setVisible(true);
            // Affichage plein √©crant
            Util.out("ISMPro - End run...");
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem loadLayoutMenuItem;
    private javax.swing.JMenuItem mIConfigApp;
    private javax.swing.JMenuItem mIConfigAutomate;
    private javax.swing.JMenu mItemConfig;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemConfigurations;
    private javax.swing.JMenuItem menuItemLinks;
    private javax.swing.JMenuItem menuItemThemeCDEMotif;
    private javax.swing.JMenuItem menuItemThemeMetal;
    private javax.swing.JMenuItem menuItemThemeNimbus;
    private javax.swing.JMenuItem menuItemThemeWindows;
    private javax.swing.JMenuItem menuItemThemeWindowsClassic;
    private javax.swing.JMenuItem menuItemTransfer;
    private javax.swing.JMenuItem miThemeDark;
    private javax.swing.JMenuItem miThemeGitHubDark;
    private javax.swing.JMenuItem miThemeLight;
    private javax.swing.JMenuItem miThemeSolarizedDark;
    private javax.swing.JTextArea outputStream;
    private javax.swing.JPanel outputStreamPanel;
    private javax.swing.JScrollPane outputStreamScroll;
    private javax.swing.JMenuItem saveLayout;
    private javax.swing.JButton tbBtnConfigurations;
    private javax.swing.JButton tbBtnExit;
    private javax.swing.JButton tbBtnLinks;
    private javax.swing.JButton tbBtnPLCTester;
    private javax.swing.JButton tbBtnTransfer;
    private javax.swing.JMenu themeMenu;
    private javax.swing.JPopupMenu.Separator themeSeparator;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        System.out.println("internalFrameClosing");
        JInternalFrame iframe = e.getInternalFrame();
//        if (iframe instanceof LinkFrame) {
//            LinkFrame.openFrameCount--;
//            linkFrame = null;
//        } else if (iframe instanceof PLCTesterFrame) {
//            PLCTesterFrame.openFrameCount--;
//            configFrame = null;
//        }

    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
    }

    private void configureLookAndFeel() {
        try {
            FlatLaf.registerCustomDefaultsSource("docking");

            System.setProperty("flatlaf.uiScale", String.valueOf(uiScale));

            if (lookAndFeel.equals("light")) {
                UIManager.setLookAndFeel(new FlatLightLaf());
            } else if (lookAndFeel.equals("dark")) {
                UIManager.setLookAndFeel(new FlatDarkLaf());
            } else if (lookAndFeel.equals("github-dark")) {
                UIManager.setLookAndFeel(new FlatGitHubDarkIJTheme());
            } else if (lookAndFeel.equals("solarized-dark")) {
                UIManager.setLookAndFeel(new FlatSolarizedDarkIJTheme());
            } else {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                        | UnsupportedLookAndFeelException ex) {
                    throw new RuntimeException(ex);
                }
            }
            FlatLaf.updateUI();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                    | UnsupportedLookAndFeelException ex) {
                throw new RuntimeException(ex);
            }
        }
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(0, 0, 0, 0));
        UIManager.getDefaults().put("TabbedPane.tabsOverlapBorder", true);

        if (edtViolationDetector) {
            // this is an app to test the docking framework, we want to make sure we detect EDT violations as soon as possible
            FailOnThreadViolationRepaintManager.install();
        }
    }

    @Override
    public Integer call() throws Exception {
        SwingUtilities.invokeLater(this::configureLookAndFeel);

        SwingUtilities.invokeLater(() -> {

            setVisible(true);

            // now that the main frame is set up with the defaults, we can restore the layout
            docking.getAppState().setPersistFile(layoutFile);

            try {
                docking.getAppState().restore();
            } catch (DockingLayoutException e) {
                // something happened trying to load the layout file, record it here
                e.printStackTrace();
            }

            docking.getAppState().setAutoPersist(true);
        });
        return 0;
    }

}
